// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package storage

import (
	"context"
	"sync"
)

// Ensure, that MetadataClientMock does implement MetadataClient.
// If this is not the case, regenerate this file with moq.
var _ MetadataClient = &MetadataClientMock{}

// MetadataClientMock is a mock implementation of MetadataClient.
//
//	func TestSomethingThatUsesMetadataClient(t *testing.T) {
//
//		// make and configure a mocked MetadataClient
//		mockedMetadataClient := &MetadataClientMock{
//			CreateFunc: func(ctx context.Context, md *Metadata) error {
//				panic("mock out the Create method")
//			},
//		}
//
//		// use mockedMetadataClient in code that requires MetadataClient
//		// and then make assertions.
//
//	}
type MetadataClientMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, md *Metadata) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Md is the md argument value.
			Md *Metadata
		}
	}
	lockCreate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *MetadataClientMock) Create(ctx context.Context, md *Metadata) error {
	if mock.CreateFunc == nil {
		panic("MetadataClientMock.CreateFunc: method is nil but MetadataClient.Create was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Md  *Metadata
	}{
		Ctx: ctx,
		Md:  md,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, md)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedMetadataClient.CreateCalls())
func (mock *MetadataClientMock) CreateCalls() []struct {
	Ctx context.Context
	Md  *Metadata
} {
	var calls []struct {
		Ctx context.Context
		Md  *Metadata
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}
